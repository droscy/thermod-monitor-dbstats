#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Thermod monitor that collects statistics on thermod operation.

@author:     Simone Rossetto
@copyright:  2018 Simone Rossetto
@license:    GNU General Public License v3
@contact:    simros85@gmail.com

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
import signal
import argparse
import requests
import logging
import time
import sqlite3

from thermod import ThermodStatus
from thermod.common import LogStyleAdapter, LOGGER_BASE_NAME, LOGGER_FMT_MSG, \
    LOGGER_FMT_TIME, LOGGER_FMT_STYLE, LOGGER_FMT_MSG_SYSLOG
from logging.handlers import SysLogHandler

__version__ = '0.0.1'
__date__ = '2018-04-04'
__updated__ = '2018-04-04'


# setting up logging system
logger = LogStyleAdapter(logging.getLogger('{}.buttonled'.format(LOGGER_BASE_NAME)))
logger.setLevel(logging.INFO)



# shutdown check and return code
running = True
main_return_code = 0

def shutdown(signum=None, frame=None, exitcode=0):
    global running, main_return_code
    logger.info('shutdown requested')
    running = False
    main_return_code = exitcode

signal.signal(signal.SIGTERM, shutdown)


# main
parser = argparse.ArgumentParser(description='Thermod database statistics gathering')
parser.add_argument('-v', '--version', action='version', version='%(prog)s {}'.format(__version__))
parser.add_argument('-f', '--dbfile', action='store', default='thermod-dbstats.db', help='path to database file')
parser.add_argument('-t', '--timelimit', action='store', type=int, default=1095, help='number of days to keep in the database (default 3 years)')
parser.add_argument('-H', '--host', action='store', default='localhost', help='thermod socket host name')
parser.add_argument('-P', '--port', action='store', type=int, default=4344, help='thermod socket port')
parser.add_argument('-D', '--debug', action='store_true', help='start monitor in debug mode')
parser.add_argument('-d', '--daemon', action='store_true', help='start monitor in background (log to syslog)')
args = parser.parse_args()

if args.debug:
    logger.setLevel(logging.DEBUG)

if args.daemon:
    syslog = SysLogHandler(address='/dev/log', facility=SysLogHandler.LOG_DAEMON)
    syslog.setFormatter(logging.Formatter(fmt=LOGGER_FMT_MSG_SYSLOG,
                                          style=LOGGER_FMT_STYLE))
    logger.addHandler(syslog)
else:
    console = logging.StreamHandler(sys.stdout)
    console.setFormatter(logging.Formatter(fmt=LOGGER_FMT_MSG,
                                           datefmt=LOGGER_FMT_TIME,
                                           style=LOGGER_FMT_STYLE))
    logger.addHandler(console)


# main
logger.info('Thermod DB-Stats monitor v{} started', __version__)

request_url = 'http://{}:{}'.format(args.host, args.port)

last_status = None

try:
    logger.debug('opening database {}', args.dbfile)
    connection = sqlite3.connect(args.dbfile)

    try:
        cursor = connection.cursor()
        session = requests.Session()
        
        logger.debug('get current status from thermod socket')
        rsp = session.get('{}/status'.format(request_url))
        rsp.raise_for_status()  # check error status code
        
        logger.debug('processing response data')
        jrsp = rsp.json()
        last_status = ThermodStatus(**jrsp)
        logger.debug('current status: {}', last_status)
        
        if last_status.heating_status == 1:
            pass  # TODO insert
        
        else:
            # nothing to do
            pass
        
        while running:
            logger.debug('attach monitor to thermod')
            rsp = session.get('{}/monitor'.format(request_url))
            rsp.raise_for_status()  # check error status code
            
            logger.debug('processing response data')
            jrsp = rsp.json()
            status = ThermodStatus(**jrsp)
            logger.debug('current status: {}', status)
            
            if status.heating_status > last_status.heating_status:  # heating just switched on
                pass  # TODO inserire nuova riga
            
            elif status.heating_status < last_status.heating_status:  # heating just switched off
                pass  # TODO aggiornare l'ultima riga
            
            logger.debug('saving current status as last status')
            last_status = status
    
    except sqlite3.Error:
        pass  # TODO capire se qui serve
    
    finally:
        connection.close()

except sqlite3.Error:
    # TODO
    pass


	#cursor = connection.cursor()
	#
	#while running:
	#	try:
	#		logger.debug('start connection to Thermod')
    #  
    #
	#	except (requests.ConnectionError, requests.Timeout) as e:
    #  logger.error('error while connecting to Thermod: {}', e)
	#		logger.info('sleeping for {} seconds', sleep)
	#		time.sleep(sleep)
	#
    #
    #try:
    #    try:
    #        logger.debug('start first connection to Thermod')
    #        # TODO
    #    
    #    except (requests.ConnectionError, requests.Timeout) as e:
    #        # do nothing, continue and go to sleep
    #        logger.error('errore while connecting to Thermod: {}', e)
    #    
    #    logger.debug('starting main cycle')
    #    
    #    while running:
    #        try:
	#            # TODO
    #            pass
    #        
    #        except ValueError as ve:
    #            logger.warning('invalid value returned from Thermod: {}', ve)
    #        
    #        except requests.RequestException as e:
    #            logger.warning('error while communicating with Thermod: {}', e)
    #            time.sleep(10)
    #
    #except Exception as e:
    #    logger.critical('unknown error: {}', e)
    #    main_return_code = 1
    #
    #except KeyboardInterrupt:
    #    logger.debug('shutdown requested by keyboard interrupt')
    #    shutdown()

logger.info('closing monitor with return code {}', main_return_code)
exit(main_return_code)

# vim: syntax=python fileencoding=utf-8
